Here‚Äôs an end-to-end step-by-step guide to set up Grafana + Prometheus + Alertmanager to monitor Kubernetes pod logs, resources, and send alerts ‚Äî with optional Loki integration for log visibility.

üß∞ TOOLS USED
Tool	Role
Prometheus	Collects metrics from pods/nodes
Alertmanager	Sends alerts via Email/Slack/etc.
Grafana	Dashboards & Alert visualization
Loki	(Optional) Centralized pod log monitoring
Promtail	(Optional) Sends logs to Loki

‚úÖ PART 1: Prerequisites
A running Kubernetes cluster (minikube, EKS, AKS, etc.)

kubectl configured

helm installed

‚úÖ PART 2: Deploy Prometheus + Grafana + Alertmanager Using Helm
‚¨áÔ∏è Step 1: Add Helm Repo

helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
helm repo update
üöÄ Step 2: Install Prometheus Stack (includes Grafana & Alertmanager)


root@ip-172-31-47-40:~# kubectl create ns monitoring
namespace/monitoring created
root@ip-172-31-47-40:~# helm install prometheus prometheus-community/kube-prometheus-stack -n monitoring
NAME: prometheus
LAST DEPLOYED: Thu Aug 21 10:43:44 2025
NAMESPACE: monitoring
STATUS: deployed
REVISION: 1
NOTES:
kube-prometheus-stack has been installed. Check its status by running:
  kubectl --namespace monitoring get pods -l "release=prometheus"

Get Grafana 'admin' user password by running:

  kubectl --namespace monitoring get secrets prometheus-grafana -o jsonpath="{.data.admin-password}" | base64 -d ; echo

Access Grafana local instance:

  export POD_NAME=$(kubectl --namespace monitoring get pod -l "app.kubernetes.io/name=grafana,app.kubernetes.io/instance=prometheus" -oname)
  kubectl --namespace monitoring port-forward $POD_NAME 3000

Visit https://github.com/prometheus-operator/kube-prometheus for instructions on how to create & configure Alertmanager and Prometheus instances using the Operator.
================================================================================================================================================================

root@ip-172-31-33-113:~# kubectl get svc -n monitoring
NAME                                      TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                      AGE
alertmanager-operated                     ClusterIP   None             <none>        9093/TCP,9094/TCP,9094/UDP   6m28s
prometheus-grafana                        ClusterIP   10.100.148.45    <none>        80/TCP                       6m33s
prometheus-kube-prometheus-alertmanager   ClusterIP   10.100.76.209    <none>        9093/TCP,8080/TCP            6m33s
prometheus-kube-prometheus-operator       ClusterIP   10.100.5.219     <none>        443/TCP                      6m33s
prometheus-kube-prometheus-prometheus     ClusterIP   10.100.241.248   <none>        9090/TCP,8080/TCP            6m33s
prometheus-kube-state-metrics             ClusterIP   10.100.102.50    <none>        8080/TCP                     6m33s
prometheus-operated                       ClusterIP   None             <none>        9090/TCP                     6m28s
prometheus-prometheus-node-exporter       ClusterIP   10.100.95.61     <none>        9100/TCP                     6m33s

==============================================================================================================================================================
root@ip-172-31-33-113:~# kubectl patch svc prometheus-kube-prometheus-prometheus -n monitoring -p '{"spec": {"type": "NodePort"}}'
service/prometheus-kube-prometheus-prometheus patched
root@ip-172-31-33-113:~# kubectl get svc prometheus-kube-prometheus-prometheus -n monitoring
NAME                                    TYPE       CLUSTER-IP       EXTERNAL-IP   PORT(S)                         AGE
prometheus-kube-prometheus-prometheus   NodePort   10.100.241.248   <none>        9090:30667/TCP,8080:30093/TCP   11m
root@ip-172-31-33-113:~# kubectl get nodes -o wide
NAME                            STATUS   ROLES    AGE   VERSION               INTERNAL-IP     EXTERNAL-IP     OS-IMAGE                       KERNEL-VERSION                    CONTAINER-RUNTIME
ip-192-168-0-188.ec2.internal   Ready    <none>   19m   v1.32.7-eks-3abbec1   192.168.0.188   18.208.205.63   Amazon Linux 2023.8.20250818   6.1.147-172.266.amzn2023.x86_64   containerd://1.7.27

Prometheus
http://18.208.205.63:30667
machine_memory_bytes
================================================grafana dashboard
root@ip-172-31-33-113:~# helm repo add grafana https://grafana.github.io/helm-charts
helm repo update
"grafana" has been added to your repositories
Hang tight while we grab the latest from your chart repositories...
...Successfully got an update from the "grafana" chart repository
...Successfully got an update from the "prometheus-community" chart repository
Update Complete. ‚éàHappy Helming!‚éà
root@ip-172-31-33-113:~# helm install grafana grafana/grafana -n monitoring
NAME: grafana
LAST DEPLOYED: Sat Aug 23 10:27:31 2025
NAMESPACE: monitoring
STATUS: deployed
REVISION: 1
NOTES:
1. Get your 'admin' user password by running:

   kubectl get secret --namespace monitoring grafana -o jsonpath="{.data.admin-password}" | base64 --decode ; echo


2. The Grafana server can be accessed via port 80 on the following DNS name from within your cluster:

   grafana.monitoring.svc.cluster.local

   Get the Grafana URL to visit by running these commands in the same shell:
     export POD_NAME=$(kubectl get pods --namespace monitoring -l "app.kubernetes.io/name=grafana,app.kubernetes.io/instance=grafana" -o jsonpath="{.items[0].metadata.name}")
     kubectl --namespace monitoring port-forward $POD_NAME 3000

3. Login with the password from step 1 and the username: admin
#################################################################################
######   WARNING: Persistence is disabled!!! You will lose your data when   #####
######            the Grafana pod is terminated.                            #####
#################################################################################
You want to switch it to NodePort (like you did for Prometheus).

 Method 1: Patch existing service
kubectl patch svc grafana -n monitoring -p '{"spec": {"type": "NodePort"}}'
root@ip-172-31-33-113:~# kubectl get svc -n monitoring
NAME                                      TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                         AGE
alertmanager-operated                     ClusterIP   None             <none>        9093/TCP,9094/TCP,9094/UDP      32m
grafana                                   NodePort    10.100.32.230    <none>        80:32737/TCP                    15m

===========================================================
Step 3: Add Prometheus as a Data Source

In Grafana ‚Üí Menu (‚ò∞) ‚Üí Connections ‚Üí Data sources ‚Üí Add data source

Select Prometheus

In the HTTP URL field, enter:

http://prometheus-kube-prometheus-prometheus:9090

Leave default Access = Server (default)

Click Save & Test ‚Üí You should see "Data source is working" ‚úÖ
=====================================================================================
You‚Äôve added Prometheus as a data source in Grafana and started adding visualizations (panels).

================================================================
